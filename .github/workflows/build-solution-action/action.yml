name: 'Build Solution'
description: 'Builds the solution using Visual Studio'
inputs:
  run-tests:
    required: false
    description: 'Run tests after building the solution'
    default: 'true'
runs:
  using: "composite"
  steps:
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
          dotnet-version: 8.0.x

    - name: Restore Dependencies
      run: dotnet restore

    - name: Run Tests
      if: ${{ inputs.run-tests == 'true' }}
      run: dotnet test --logger:"console;verbosity=normal"
      env:
        ForwarderUrl: https://dev.api.vbase.com/forwarder
        ApiKey: ${{ secrets.API_KEY }}
        PrivateKey: ${{ secrets.PRIVATE_KEY }}

    # vswhere helps us to find Visual Studio installation path
    - name: Install vswhere
      run: choco install vswhere

    # Find Visual Studio installation path
    - name: Find Visual Studio
      id: vs
      run: |
        vswhere -latest -products * -requires Microsoft.Component.MSBuild -property installationPath
        echo "::set-output name=vs-path::$(vswhere -latest -products * -requires Microsoft.Component.MSBuild -property installationPath)"

    # Workaround for a known issue with building a Visual Studio Installer project from the command line
    # See: https://marketplace.visualstudio.com/items?itemName=UnniRavindranathan-MSFT.MicrosoftVisualStudio2013InstallerProjects
    - name: Disable Out of Proc Build (fix for HRESULT = 8000000A)
      working-directory: ${{ steps.vs.outputs.vs-path }}\Common7\IDE\CommonExtensions\Microsoft\VSI\DisableOutOfProcBuild
      shell: cmd
      run: DisableOutOfProcBuild.exe

    # Build the solution
    # Note: We are using devenv.com instead of msbuild
    # because the Visual Studio Installer project does not support msbuild
    - name: Build Solution
      run: |
        $vsPath = '${{ steps.vs.outputs.vs-path }}'
        & "$vsPath\Common7\IDE\devenv.com" vBase.sln /Build "Release"