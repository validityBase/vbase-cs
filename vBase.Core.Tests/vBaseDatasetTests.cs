using FluentAssertions;
using vBase.Core.Dataset;
using vBase.Core.Dataset.vBaseObjects;

namespace vBase.Core.Tests
{
  public class vBaseDatasetTests: vBaseForwarderTestBase
  {
    [Test]
    public async Task AddVerify_ComplexScenario_HappyPath_Test()
    {
      var dataset = new vBaseDataset(
        Client, 
        TestContext.CurrentContext.Random.GetString(50),
        vBaseStringObject.vBaseObjectType);

      await dataset.AddRecord(TestContext.CurrentContext.Random.GetString(50));
      await dataset.AddRecord(TestContext.CurrentContext.Random.GetString(50));

      var verificationResult = await dataset.VerifyCommitments();

      verificationResult.VerificationPassed.Should().BeTrue();
    }

    [Test]
    public async Task VerifyPyJsonDeserialization_And_Serialization()
    {
      // This is a JSON string generated by Python SDK
      // we should be able to restore the dataset from this JSON string
      // and verify the commitments
      string pyGeneratedDatasetJson =
        """
        {
          "name": "PyCompatibilityTestDataset",
          "owner": "0x62328CBfa28235deF2bce24560100363eE529Ba0",
          "cid": "0xd682c5e72f63e961ed67d04e73ac2454bcb8560f89a8f66e3f813a4364eac4fd",
          "record_type_name": "VBaseStringObject",
          "records": [
            {
              "cid": "0x5cbda6a837e3c6aebd2ce2f14510d4234b870d415ac06f4e411d995504232d2d",
              "data": "TestRecord"
            }
          ],
          "timestamps": ["2024-12-23 14:37:24+00:00"]}
        """;

      var dataset = new vBaseDataset(Client, pyGeneratedDatasetJson);

      var verificationRes = await dataset.VerifyCommitments();

      verificationRes.VerificationPassed.Should().BeTrue();

      // let's serialize the dataset back to JSON
      // and then deserialize it again
      var json = dataset.ToJson();
      var dataset2 = new vBaseDataset(Client, json);
      verificationRes = await dataset2.VerifyCommitments();
      verificationRes.VerificationPassed.Should().BeTrue();

    }
  }
}
